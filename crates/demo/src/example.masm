
use.std::sys
use.miden::tx
use.miden::account

# The reference price storage
const.PRICE_STORAGE_SLOT=0

#! Calls the ORACLE_ID get_median procedure of the provided account.
#!
#! Inputs: [ORACLE_ID, PAIR]
#! Output: [ENTRY]
proc.call_oracle_get_median
    push.0xb86237a8c9cd35acfef457e47282cc4da43df676df410c988eab93095d8fb3b9
    # => [GET_MEDIAN_HASH, ORACLE_ID, PAIR]
    swapw swap.2 drop swap.2 drop
    # => [oracle_id,oracle_id,  GET_ENTRY_HASH, PAIR]
    exec.tx::execute_foreign_procedure
    # => [price]
end

#! Simple function that takes an asset and a price, and return if the actual price is greater than the input price
#! It is a simple demonstration of how we use Pragma feed for a given asset for view purpose only
#! Inputs: [ORACLE_ID, PAIR_ID, PRICE]
#! Outputs: [bool]
export.is_greater
    exec.call_oracle_get_median
    # => [actual_price, PRICE]
    movdn.4 drop drop drop
    # => [price, actual_price]
    lt
    # => [bool]
end

#! Extension of the previous function, but this time, write to the example storage (tx)
#! Inputs: [ORACLE_ID, PAIR_ID, PRICE]
export.store_if_greater
    dupw.2
    # =>  [PRICE,ORACLE_ID, PAIR_ID, PRICE]
    movdnw.3
    # =>  [ORACLE_ID, PAIR_ID, PRICE,PRICE]
    exec.is_greater
    # => [bool,PRICE]
    if.true
        # => [PRICE]
        push.PRICE_STORAGE_SLOT exec.account::set_map_item
    else
        dropw
        # If false, we still want to write to storage to force the account hash change
        push.PRICE_STORAGE_SLOT exec.account::set_map_item
    end
    push.1 exec.account::incr_nonce
end
