use.std::sys
use.miden::account

# ERRORS
# =================================================================================================

# Raised when an already registered publisher tries to register again.
const.ERR_PUBLISHER_ALREADY_REGISTERED=0x0002004A

# Raised when an unregistered publisher tries to publish data.
const.ERR_PUBLISHER_NOT_REGISTERED=0x0002004A

# CONSTANTS
# =================================================================================================

# Holds the next storage slot index available. Will be used when we register a publisher,
# so we can assign it a slot.
const.NEXT_PUBLISHER_INDEX_SLOT=0

# Holds the next storage slot index available. Will be used when we register a publisher,
# so we can assign it a slot.
const.PUBLISHER_REGISTRY_MAP_SLOT=1

#! Gets entry from the oracle's data slots.
#!
#! TODO: Remove this legacy function.
#!
#! Inputs:  [publisher_id, pair]
#! Outputs: [WORD] ; Word being [pair, price, decimals, timestamp]
#!
export.get_entry
    # 1. Find the publisher id slot [OU ALORS] Call the get_entry function of the publisher

    # 2. If not found, return err [OU ALORS] if the call failed, the procedure does not exists <- so the publisher is not a publisher.
    
    # 3. call get_entry from the publisher

    # 4. return the entry
    exec.sys::truncate_stack
end

#! Gets the median price of a given asset.
#!
#! Inputs:  [ASSET]
#! Outputs: [PRICE]
#!
export.get_median
    # 1. iterate from 2 to NEXT_PUBLISHER_INDEX_SLOT value.

    # 2. for each slot, get the publisher id and call get_entry.

    # 3. sort the entries, see sorting algorithms here: https://github.com/0xPolygonMiden/examples/pulls

    # 4. compute median

    # 5. return median

    # 6. increments the nonce (anyone should be able to call that function)
    push.1 exec.account::incr_nonce

    dropw
end

#! Registers a new publishers into the Oracle.
#! Can only be called by the Owner of the Oracle account.
#! Will reserve a storage slot for the publisher if it's not already registered,
#! which mean this publisher will be able to publish data.
#!
#! Inputs:  [caller_id]
#! Outputs: []
#!
export.register_publisher
    # get the id of the caller (or from the input)

    # check if it is not already present in the registry, if yes raise err (get_map_item)
    
    # assign NEXT_PUBLISHER_INDEX_SLOT to the caller and store in the registry map (set_map_item)

    # increment NEXT_PUBLISHER_INDEX_SLOT

    # Only the oracle owner should be able to call this
    call.::miden::contracts::auth::basic::auth_tx_rpo_falcon512
    drop
end
