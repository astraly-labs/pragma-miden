use.std::sys
use.miden::account

# ERRORS
# =================================================================================================

# Raised when an already registered publisher tries to register again.
const.ERR_PUBLISHER_ALREADY_REGISTERED=0x0002004A

# Raised when an unregistered publisher tries to publish data.
const.ERR_PUBLISHER_NOT_REGISTERED=0x0002004A

# CONSTANTS
# =================================================================================================

# Legacy storage slot for the test, so they still pass.
# TODO(akhercha): Remove this.
const.LEGACY_ENTRY_SLOT=0

# Holds the next storage slot index available. Will be used when we register a publisher,
# so we can assign it a slot.
const.NEXT_PUBLISHER_INDEX_SLOT=1

# The slot in this component's storage layout where a mapping of
# published_id <=> publisher_slot are stored.
# Each publisher is assigned a storage slot (so as long as we have less than 200 publishers
# it should be fine) where they'll publish entries on a Map.
const.PUBLISHERS_REGISTRY_MAP_SLOT=2

#! Writes a new entry into the Oracle.
#! Must be called by a registered publisher.
#! The price will be stored in the publisher map for the given asset, overriding the
#! last value.
#!
#! Inputs:  [entry]
#! Outputs: []
#!
export.publish_entry
    # TODO: Remove this legacy block
    push.LEGACY_ENTRY_SLOT exec.account::set_item
    dropw

    # Get the id of the caller (function or from the input)
    exec.account::get_id

    # Check if registered

    # Store in its map the entry. (Data validation?)

    # increments the nonce for valid publishers
    push.1 exec.account::incr_nonce

    dropw
    # => []
end

#! Gets entry from the oracle's data slots.
#!
#! TODO: Remove this legacy function.
#!
#! Inputs:  [storage_slot]
#! Outputs: [WORD]
#!
export.get_entry
    push.LEGACY_ENTRY_SLOT exec.account::get_item
    exec.sys::truncate_stack
end

#! Gets the median price of a given asset.
#!
#! Inputs:  [ASSET]
#! Outputs: [PRICE]
#!
export.get_median
    # get all asset prices from publisher map 0 to NEXT_PUBLISHER_INDEX_SLOT

    # compute median

    # increments the nonce (anyone should be able to call that function)
    push.1 exec.account::incr_nonce

    dropw
end

#! Registers a new publishers into the Oracle.
#! Can only be called by the Owner of the Oracle account.
#! Will reserve a storage slot for the publisher if it's not already registered,
#! which mean this publisher will be able to publish data.
#!
#! Inputs:  []
#! Outputs: []
#!
export.register_publisher
    # get the id of the caller (or from the input)

    # check if it is not already present in the registry, if yes raise err (get_map_item)

    # assign NEXT_PUBLISHER_INDEX_SLOT to the caller (set_map_item)

    # increment NEXT_PUBLISHER_INDEX_SLOT

    call.::miden::contracts::auth::basic::auth_tx_rpo_falcon512
    drop
end
