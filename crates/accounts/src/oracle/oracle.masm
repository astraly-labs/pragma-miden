use.std::sys
use.miden::account

# ERRORS
# =================================================================================================

# Raised when an unregistered publisher tries to publish data.
const.ERR_PUBLISHER_NOT_REGISTERED=0x0002004A

# CONSTANTS
# =================================================================================================

# Legacy storage slot for the test, so they still pass.
# TODO(akhercha): Remove this.
const.LEGACY_ENTRY_SLOT=0

# The slot in this component's storage layout where a mapping of
# published_id <=> publisher_slot are stored.
# Each publisher is assigned a storage slot (so as long as we have less than 200 publishers
# it should be fine) where they'll publish entries on a Map.
const.PUBLISHERS_REGISTRY_MAP_SLOT=2

# The first index of the publishers slots. It means, from this index until the end,
# the slots are reserved for the publishers.
const.PUBLISHERS_ENTRIES_START_SLOT=6

#! Writes a new entry into the Oracle.
#! Must be called by a registered publisher.
#! The price will be stored in the publisher map for the given asset, overriding the
#! last value.
#!
#! Inputs:  [PUBLISHER_ID, ASSET, PRICE]
#! Outputs: []
#!
export.publish_entry
    push.LEGACY_ENTRY_SLOT exec.account::set_item
    dropw

    # Functions to use:
    # get_id <- returns the id of the current caller?
    # set_map_item <- store in the publisher entries map

    # Simple set_map_item test
    push.2
    push.2
    push.2
    exec.account::set_map_item

    # increments the nonce for valid publishers
    push.1 exec.account::incr_nonce

    dropw
    # => []
end

#! Gets entry from the oracle's data slots.
#!
#! Inputs:  [storage_slot]
#! Outputs: [WORD]
#!
export.get_entry
    push.LEGACY_ENTRY_SLOT exec.account::get_item
    exec.sys::truncate_stack
end

#! Gets the median price of a given asset.
#!
#! Inputs:  [ASSET]
#! Outputs: [PRICE]
#!
export.get_median
    # TODO: Implementation.

    # increments the nonce (anyone should be able to call that function)
    push.1 exec.account::incr_nonce

    # get_map_item
    
    dropw
end

#! Registers a new publishers into the Oracle.
#! Can only be called by the Owner of the Oracle account.
#! Will reserve a storage slot for the publisher if it's not already registered,
#! which mean this publisher will be able to publish data.
#!
#! Inputs:  [PUBLISHER_ID]
#! Outputs: []
#!
export.register_publisher
    # TODO: Implementation.

    call.::miden::contracts::auth::basic::auth_tx_rpo_falcon512
    drop
end
